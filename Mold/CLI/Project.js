Seed({
		name : "Mold.CLI.Project",
		dna : "cli",
		include : [
			"Mold.DNA.CLI",
			"Mold.Tools.ProjectHandler"
		]
	},
	{
		command : "project",
		description : "Install seed from the given repository",
		parameter : {
			'--new' : {
				'description' : 'Creates a new project in the current directory.'
			}
		},
		execute : function(parameter, cli){

			if(parameter['path']){
				var path = parameter['path'];
			}else{
				path = process.cwd();
			}

			var clientCondition = function (){
				var appType = form.getData()['apptype'];
				var autogenerate = form.getData()['autogenerate'];
				if(appType === "client" || appType === "isomorph" && autogenerate === "no"){
					return true;
				}
				return false;
			}

			var serverCondition = function (){
				var appType = form.getData()['apptype'];
				var autogenerate = form.getData()['autogenerate'];
				if(appType === "server" || appType === "isomorph" && autogenerate === "no"){
					return true;
				}
				return false;
			}


			cli.addCompleter('apptype', function(line){
				var selection = [ "server", "client", "isomorph"];
				var hits = selection.filter(function(item) { 
					return item.indexOf(line) == 0 
				});
  				return [hits.length ? hits : selection, line]
			});


			var form = cli.createForm([
				{
					label : "What is the name of yout application?",
					input : {
						name : 'appname',
						validate : 'required',
						messages : {
							error : "Please add the name of your application!",
							success : function(data){
								return "The name of yout application is " +cli.COLOR_CYAN + data  + cli.COLOR_RESET + ". " + cli.SYMBOLE_TRUE
							}
						},
						onsuccess : function(data){
							this.next();
						}
					}
				},
				{
					label : "Do you wont to create a server, a client or a isomorph application? (sever/client/isomorph)?",
					input : {
						name : 'apptype',
						type : 'apptype',
						validate : 'required',
						messages : {
							error : "Please answer the question with server, client or isomorph!",
							success : function(data){
								return "Ok, you choose a " +cli.COLOR_CYAN + data  + cli.COLOR_RESET + " application. " + cli.SYMBOLE_TRUE
							}
						},
						onsuccess : function(data){
							this.next();
						}
					}
				},
				{
					label : "Do you wish to autogenerate the project with all pathes? (yes/no)",
					input : {
						name : 'autogenerate',
						type : 'yesno',
						validate : 'yesno',
						messages : {
							success : function(data){
								if(data === "yes"){
									return "Project will be autogenerated. " + cli.SYMBOLE_TRUE
								}
								return "Project will be manual generated. " + cli.SYMBOLE_TRUE
							}
						},
						onsuccess : function(data){
							this.next();
						}
					}
				},
				//client repo
				{	
					condition : clientCondition,
					label : "Path to your global client repository? (if you build a client only app, make sure the repo is accessible over http(s))",
					input : {
						name : 'clientglobalerepo',
						type : 'filesystem',
						messages : {
							success : function(data){
								return "Your global client repository is set to : " +cli.COLOR_CYAN + data + cli.COLOR_RESET + " " + cli.SYMBOLE_TRUE
							}
						},
						onsuccess : function(){
							this.next();
						}
					}
				},
				{	
					condition : clientCondition,
					label : "Path to your local client repository? (if you build a client only app, make sure the repo is accessible over http(s))",
					input : {
						name : 'clientlocalrepo',
						type : 'filesystem',
						messages : {
							success : function(data){
								return "Your global client repository is set to : " +cli.COLOR_CYAN + data + cli.COLOR_RESET + " " + cli.SYMBOLE_TRUE
							}
						},
						onsuccess : function(){
							this.next();
						}
					}
				},
				{
					condition : clientCondition,
					label : "Please enter the namen of your client main seed. (example: Mold.Main.js)",
					input : {
						name : 'clientmainseed',
						type : 'filesystem',
						messages : {
							success : function(data){
								return "The name of your client main seed is: " +cli.COLOR_CYAN + data + cli.COLOR_RESET + " " + cli.SYMBOLE_TRUE
							}
						},
						onsuccess : function(){
							this.next();
						}
					}
				},
				//server repo
				{
					condition : serverCondition,
					label : "Path to your global server repository?",
					input : {
						name : 'serverglobalerepo',
						type : 'filesystem',
						messages : {
							success : function(data){
								return "Your global server repository is set to : " +cli.COLOR_CYAN + data + cli.COLOR_RESET + " " + cli.SYMBOLE_TRUE
							}
						},
						onsuccess : function(){
							this.next();
						}
					}
				},
				{
					condition : serverCondition,
					label : "Path to your local server repository?",
					input : {
						name : 'serverlocalrepo',
						type : 'filesystem',
						messages : {
							success : function(data){
								return "Your local server repository is set to : " +cli.COLOR_CYAN + data + cli.COLOR_RESET + " " + cli.SYMBOLE_TRUE
							}
						},
						onsuccess : function(){
							this.next();
						}
					}
				},
				{
					condition : serverCondition,
					label : "Please enter the namen of your server main seed. (example: Mold.Main.js)",
					input : {
						name : 'servermainseed',
						type : 'filesystem',
						messages : {
							success : function(data){
								return "The name of your server main seed is: " +cli.COLOR_CYAN + data + cli.COLOR_RESET + " " + cli.SYMBOLE_TRUE
							}
						},
						onsuccess : function(){
							this.next();
						}
					}
				}
			]);

			form.on("end", function(){

				var data = form.getData();

				if(data.autogenerate){
					
					var clientDefault = {
						"clientglobalrepo" : "global/Mold/",
						"clientlocalrepo" : "client/Mold/",
						"clientmainseed" : "Mold.Main"
					}

					var serverDefault = {
						"serverglobalrepo" : "global/Mold/",
						"serverlocalrepo" : "server/Mold/",
						"servermainseed" : "Mold.Main"
					}

					switch(data.apptype){
						case "isomorph" :
							Mold.mixin(data, clientDefault);
							Mold.mixin(data, serverDefault);
							break;
						case "client":
							Mold.mixin(data, clientDefault);
							break;
						case "server":
							Mold.mixin(data, serverDefault);
							break;
					}
				}


				var projectHandler = new Mold.Tools.ProjectHandler();

				projectHandler.create(data.appname, path, data)
				form.exit();
			})

			form.start();
		}
	}
);