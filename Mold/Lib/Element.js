Seed (	{ 		name : "Mold.Lib.Element",		dna : "class",		author : "Jan Kaufmann",		include : [			"Mold.Lib.Event"		],		description : "",	},	function(tagname){		if(typeof tagname === "object"){			var element = tagname;		}else{			var element = document.createElement(tagname);		}		var event = new Mold.Lib.Event(element);				element.ident = Mold.getId();				Mold.mixing(element, event);		var _prefixes = ["Moz", "O", "webkit"];		var _isPrefixProperty = function(property){			return !!{				'transform' : true,				'boxShadow' : true			}[property];		}		var _setCssProperty = function(property, value){			if(_isPrefixProperty(property)){				Mold.each(_prefixes, function(prefix){					element.style[prefix +(property.substring(0, 1).toUpperCase() + property.substring(1))] = value;				});							}			element.style[property] = value;				}		element.addClass = function(className){			if(this.className.indexOf(className) == -1){				this.className += " "+className;			}			this.className = Mold.trim(this.className);			return element;					}				element.removeClass = function(className){			this.className = this.className.replace(" "+className, "");			this.className = this.className.replace(className, "");			return element;		};				element.hasClass = function(className){			if(this.className.indexOf(className) > -1){				return true;			}else{				return false;			}		};				element.addText = function(text){			element.innerHTML += text;			return this.element;		}				element.attr = function(attr){			for(attribute in attr){				element.setAttribute(attribute, attr[attribute]);			}			return element;		}				element.replaceText = function(text){			element.innerHTML = text;			return element;		}		element.append = function(childElement, name){			element.appendChild(childElement);			if(name){				element[name] = childElement;			}			element.trigger("append", { child : childElement });		}		element.val = function(){			if(element.tagName === "INPUT"){				return element.value;			}else{				return element.innerHTML;			}					}		element.remove = function(){			element.parentNode.removeChild(element);		}		element.css = function(property, value){			if(Mold.isObject(property)){				Mold.each(property, function(value, prop){										_setCssProperty(prop, value);				});				return element;			}else if(property && value){				_setCssProperty(property, value);				return element;			}else{				return element.style[property];			}		}			return element;	});