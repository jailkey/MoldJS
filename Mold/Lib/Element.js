Seed (	{ 		name : "Mold.Lib.Element",		dna : "class",		author : "Jan Kaufmann",		include : [			"Mold.Lib.Event"		],		description : "",	},	function(tagname){		if(typeof tagname === "object"){			console.log("tagnake", tagname)			var element = tagname;		}else{			console.log("create element", tagname)			var element = document.createElement(tagname);		}		var event = new Mold.Lib.Event(element);				element.ident = Mold.getId();				Mold.mixing(element, event);		var _prefixes = ["Moz", "O", "webkit"];		var _isPrefixProperty = function(property){			return !!{				'transform' : true,				'boxShadow' : true			}[property];		}		var _setCssProperty = function(property, value){			if(_isPrefixProperty(property)){				Mold.each(_prefixes, function(prefix){					element.style[prefix +(property.substring(0, 1).toUpperCase() + property.substring(1))] = value;				});							}			element.style[property] = value;				}		element.addClass = function(className){			if(element.className.indexOf(className) == -1){				element.className += " "+className;			}			element.className = Mold.trim(element.className);			return element;					}				element.removeClass = function(className){			element.className = element.className.replace(" "+className, "");			element.className = element.className.replace(className, "");		//	console.log("replace classname", element, element.className, className);			return element;		};				element.hasClass = function(className){			if(element.className.indexOf(className) > -1){				return true;			}else{				return false;			}		};				element.addText = function(text){			element.innerHTML += text;			return element;		}				element.attr = function(attr, value){			if(Mold.is(value)){				element.setAttribute(attr, value);				return element;			}			for(attr in element.attributes){				return element.getAttribute(attr);			}			return false;		}				element.replaceText = function(text){			element.innerHTML = text;			return element;		}		element.append = function(childElement, name){			element.appendChild(childElement);			if(name){				element[name] = childElement;			}			element.trigger("append", { child : childElement });		}		element.val = function(){			if(element.tagName === "INPUT"){				return element.value;			}else{				return element.innerHTML;			}					}		element.html = function(value){			if(value){				element.innerHTML = value;			}else{				return element.innerHTML;			}			return element;		}		element.remove = function(){			element.parentNode.removeChild(element);		}		element.css = function(property, value){			if(Mold.isObject(property)){				Mold.each(property, function(value, prop){										_setCssProperty(prop, value);				});				return element;			}else if(property && value){				_setCssProperty(property, value);				return element;			}else{				return element.style[property];			}		}		element.animate = function(properties, duration, easing, delay){						var transistionPropertys = [];						duration = (duration) ? duration + "s" : " 1s";			easing = easing || "ease-in-out";			delay = (delay) ? delay + "s" : "";			if(Mold.isObject(properties)){				Mold.each(properties, function(value, prop){					transistionPropertys.push(					 	prop 						+ ((duration) ? " " + duration : "")						+ ((easing) ? " "+easing : "")						+ ((delay) ? " "+delay : "")					);				});			}else{				throw "animate() - first parameter must be an object!"			}						var propertyString = transistionPropertys.join(',');			element.css({				"webkitTransition" : propertyString,				"msTransition" : propertyString,				"oTransition" : propertyString,				"mozTransition" : propertyString,				"transition": propertyString			});			/*Woraround for FF*/			window.setTimeout(function(){				element.css(properties);			}, 10);					}			return element;	});